#pragma once

#include "config.h"

#define ALIGN(x) __attribute__((aligned(x)))

#if defined(__builtin_expect)
#define unlikely(expr) __builtin_expect(!!(expr), 0)
#define likely(expr) __builtin_expect(!!(expr), 1)
#else
#define unlikely(expr) (expr)
#define likely(expr) (expr)
#endif

typedef enum Error {
	ERR_OK = 0,
	ERR_INVALID_ARGUMENTS,
	ERR_SHADER_CREATION_FAILED,
	ERR_WINDOW_CREATION_FAILED,

	/* Vulkan */
	ERR_COMMAND_BUFFER_ALLOCATION_FAILED,
	ERR_COMMAND_BUFFER_DRAWING_FAILED,
	ERR_COMMAND_BUFFER_RECORDING_FAILED,
	ERR_COMMAND_POOL_CREATION_FAILED,
	ERR_DEBUG_MESSENGER_CREATION_FAILED,
	ERR_FRAMEBUFFER_CREATION_FAILED,
	ERR_GRAPHICS_PIPELINE_CREATION_FAILED,
	ERR_IMAGE_VIEW_CREATION_FAILED,
	ERR_INSTANCE_CREATION_FAILED,
	ERR_LOGICAL_DEVICE_CREATION_FAILED,
	ERR_NO_GPU_FOUND,
	ERR_PIPELINE_LAYOUT_CREATION_FAILED,
	ERR_RENDER_PASS_CREATION_FAILED,
	ERR_SEMAPHORE_CREATION_FAILED,
	ERR_SWAP_CHAIN_CREATION_FAILED,
	ERR_SWAP_CHAIN_PRESENTATION_FAILED,
	ERR_WINDOW_SURFACE_CREATION_FAILED,
} Error;

enum: int {
	WIDTH = 800,
	HEIGHT = 600
};

/* std_ds.h string hashmap */
typedef struct ALIGN(16) {
	char *key, *value;
} *Arguments;
